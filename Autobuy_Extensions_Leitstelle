// ==UserScript==
// @name         Leitstelle Autobuy Extensions
// @namespace    http://tampermonkey.net/
// @version      1.0.1
// @description  Ausbauten automatisch kaufen â€“ funktioniert sowohl in Einzelwachen als auch in Leitstellen
// @author       Silberfighter & NilsPe
// @include      https://www.leitstellenspiel.de/buildings/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=leitstellenspiel.de
// @grant        none
// ==/UserScript==

(async function () {

  //----------------------------------------------
  // EINSTELLUNGEN
  //----------------------------------------------
  const DELAY_PER_ACTION = 150; // Pause zwischen Kaufaktionen
  const DELAY_PER_BUILDING = 200; // Pause zwischen GebÃ¤uden
  const DELAY_AFTER_FETCH = 100; // Pause nach Laden von GebÃ¤uden

  //----------------------------------------------
  // KONFIGURATION
  //----------------------------------------------
  const extensionsConfigurations = [
    {
      buildingID: 0,
      displayName: "Standardwache",
      ausbauten:[0,1,2,3,4,5],
      spezialisierung:[0],
      lager:[0],
    },
    {
      buildingID: 9,
      displayName: "THW-Ortsverband",
      ausbauten:[0,1,2,4,5,6,8,9,13],
      spezialisierung:[0],
      lager:[0],
    },
    {
      buildingID: 11,
      displayName: "Bereitschaftspolizei",
      ausbauten:[0,1],
      spezialisierung:[0],
      lager:[0],
    },
    {
      buildingID: 21,
      displayName: "Rettungshunde",
      ausbauten:[]
    },
    {
      buildingID: 16,
      displayName: "Polizeizellen",
      ausbauten:[0,1,2,3,4,5,6,7,8,9]
    },
    {
      buildingID: 6,
      displayName: "Polizeiwache",
      ausbauten:[]
    },
    {
      buildingID: 12,
      displayName: "Schnelleinsatzgruppe",
      ausbauten:[3]
    },
  ];

  const buildingsIDToIgnore = [4,1,3,8,10];

  //----------------------------------------------
  // HILFSFUNKTIONEN
  //----------------------------------------------
  function delay(ms) { return new Promise(res => setTimeout(res, ms)); }

  async function getBuildingsOfLeitstelle(leitstellenId) {
    let out = [];
    try {
      const res = await fetch(`/buildings/${leitstellenId}/leitstelle-buildings`);
      const html = await res.text();
      const doc = new DOMParser().parseFromString(html, "text/html");
      const links = Array.from(doc.querySelectorAll("a[href^='/buildings/']"));
      const seen = new Set();
      out = links.map(a => {
        const id = a.getAttribute("href").split("/buildings/")[1].split("/")[0];
        const name = a.innerText.trim();
        return { id, name, type: null };
      }).filter(b => /^\d+$/.test(b.id))
        .filter(b => (seen.has(b.id) ? false : (seen.add(b.id), true)));
    } catch {}

    for (const b of out) {
      try {
        const page = await fetch(`/buildings/${b.id}`);
        const html = await page.text();
        const doc = new DOMParser().parseFromString(html, "text/html");
        const h1 = doc.querySelector("h1[building_type]");
        if (h1) b.type = h1.getAttribute("building_type");
        const h1Text = doc.querySelector("h1")?.textContent?.trim();
        if (h1Text) b.name = h1Text;
        await delay(DELAY_AFTER_FETCH);
      } catch {}
    }
    return out;
  }

  async function autobuyExtensionsForLeitstelle(leitstellenId, statusDiv) {
    const buildings = await getBuildingsOfLeitstelle(leitstellenId);
    const total = buildings.length;
    let processed = 0;

    for (const b of buildings) {
      processed++;
      if (!b.type) {
        statusDiv.innerText = `Ãœberspringe ${b.name} (${b.id}) â€“ kein Typ ermittelt`;
        continue;
      }

      const config = extensionsConfigurations.find(c => c.buildingID == Number(b.type));
      if (!config) {
        statusDiv.innerText = `(${processed}/${total}) Ãœberspringe ${b.name}`;
        await delay(DELAY_PER_BUILDING);
        continue;
      }

      statusDiv.innerText = `(${processed}/${total}) Bearbeite ${b.name} â€¦`;
      await extendBuilding(b.id, config);
      await delay(DELAY_PER_BUILDING);
    }

    statusDiv.innerText = "âœ… Autobuy Extensions abgeschlossen!";
  }

  async function extendBuilding(buildingId, config) {
    if (config.ausbauten) {
      for (const a of config.ausbauten) {
        await $.post(`/buildings/${buildingId}/extension/credits/${a}?redirect_building_id=${buildingId}`, {
          "_method": "post",
          "authenticity_token": $("meta[name=csrf-token]").attr("content")
        });
        await delay(DELAY_PER_ACTION);
      }
    }

    if (config.spezialisierung) {
      for (const s of config.spezialisierung) {
        let type = "";
        if (s == 0) type = "factory_fire_brigade";
        if (s == 1) type = "airport";
        if (s == 2) type = "water_rescue";
        if (!type) continue;

        await $.post(`/building_specializations?building_id=${buildingId}&pay_with=credits&type=${type}`, {
          "_method": "post",
          "authenticity_token": $("meta[name=csrf-token]").attr("content")
        });
        await delay(DELAY_PER_ACTION);
      }
    }

    if (config.lager) {
      for (const l of config.lager) {
        let storage_name = (l==0) ? "initial_containers" : `additional_containers_${l}`;
        await $.post(`/buildings/${buildingId}/storage_upgrade/credits/${storage_name}?redirect_building_id=${buildingId}`, {
          "_method": "post",
          "authenticity_token": $("meta[name=csrf-token]").attr("content")
        });
        await delay(DELAY_PER_ACTION);
      }
    }
  }

  //----------------------------------------------
  // HAUPTLOGIK
  //----------------------------------------------
  const buildingId = window.location.href.replace("https://www.leitstellenspiel.de/buildings/", "");
  const titleDiv = Array.from(document.getElementsByTagName("h1")).find(e => e.getAttribute("building_type") != undefined);
  if (!titleDiv) return;
  const buildingTypeID = Number(titleDiv.getAttribute("building_type"));

  // Leitstelle
  if (buildingTypeID === 7) {
    let wrapperDIV = document.createElement("div");
    wrapperDIV.innerText = "Leitstelle - Autobuy Extensions:";
    wrapperDIV.style.padding = "15px 5px 15px 5px";
    titleDiv.parentNode.parentNode.insertBefore(wrapperDIV, titleDiv.parentNode.nextSibling);

    let btn = document.createElement("a");
    btn.className = "btn btn-success btn-xs";
    btn.innerText = "Autobuy Extensions";
    btn.style.margin = "5px";
    wrapperDIV.appendChild(btn);

    let statusDiv = document.createElement("div");
    statusDiv.style.marginTop = "10px";
    statusDiv.style.fontWeight = "bold";
    wrapperDIV.appendChild(statusDiv);

    btn.addEventListener("click", async function () {
      statusDiv.innerText = "ðŸ”„ Lade GebÃ¤udelisteâ€¦";
      await autobuyExtensionsForLeitstelle(buildingId, statusDiv);
    });
    return;
  }

  // Einzelne Wache
  if (buildingsIDToIgnore.indexOf(buildingTypeID) >= 0) return;

  let wrapperDIV = document.createElement("div");
  wrapperDIV.innerText = "Extension-Configs:";
  wrapperDIV.style.padding = "15px 5px 15px 5px";
  titleDiv.parentNode.parentNode.insertBefore(wrapperDIV, titleDiv.parentNode.nextSibling);

  for (let i = 0; i < extensionsConfigurations.length; i++) {
    if (extensionsConfigurations[i].buildingID == buildingTypeID) {
      let btn = document.createElement("a");
      btn.className = "btn btn-success btn-xs autoExtensionBuy";
      btn.setAttribute("config_id", i);
      btn.innerText = extensionsConfigurations[i].displayName;
      btn.style.margin = "5px";
      wrapperDIV.appendChild(btn);
    }
  }

  document.querySelectorAll(".autoExtensionBuy").forEach(function (element) {
    element.addEventListener("click", async function () {
      const config = extensionsConfigurations[element.getAttribute("config_id")];
      let statusDiv = document.createElement("div");
      statusDiv.style.marginTop = "10px";
      statusDiv.style.fontWeight = "bold";
      wrapperDIV.appendChild(statusDiv);

      statusDiv.innerText = "ðŸš€ Kaufe Ausbauten...";
      await extendBuilding(buildingId, config);
      statusDiv.innerText = "âœ… Fertig!";
      await delay(500);
      location.reload();
    });
  });

})();
