// ==UserScript==
// @name         Leitstelle Wachenpersonal setzen
// @description  Massenbearbeitung des Maximal-Personals + automatisches Personal einstellen
// @version      1.2.2
// @author       Allure149 & NilsPe (+ Anpassungen)
// @include      /^https?:\/\/(?:w{3}\.)?(?:(policie\.)?operacni-stredisko\.cz|(politi\.)?alarmcentral-spil\.dk|(polizei\.)?leitstellenspiel\.de|(?:(police\.)?missionchief-australia|(police\.)?missionchief|(poliisi\.)?hatakeskuspeli|missionchief-japan|missionchief-korea|(politiet\.)?nodsentralspillet|(politie\.)?meldkamerspel|operador193|(policia\.)?jogo-operador112|jocdispecerat112|dispecerske-centrum|112-merkez|dyspetcher101-game)\.com|(police\.)?missionchief\.co\.uk|centro-de-mando\.es|centro-de-mando\.mx|(police\.)?operateur112\.fr|(polizia\.)?operatore112\.it|(policja\.)?operatorratunkowy\.pl|dispetcher112\.ru|(polis\.)?larmcentralen-spelet\.se)\/buildings\/.*$/
// @updateURL    https://github.com/types140/LSS-Scripte/raw/master/wachenpersonalsetzen.user.js
// @downloadURL  https://github.com/types140/LSS-Scripte/raw/master/wachenpersonalsetzen.user.js
// @grant        none
// ==/UserScript==
/* global $ */

(function () {
  'use strict';

  // ---------- UI bauen (Buttons + Eingaben, alles btn-xs) ----------
  function buildInterface() {
    // Bereits vorhanden? -> nichts tun
    if (document.getElementById('selectBuilding')) return;

    // Tabelle suchen (robust)
    const table = document.getElementById('building_table') || document.querySelector('#tab_buildings table');
    if (!table) return;

    // Wrapper-Container
    const container = document.createElement('div');
    container.style.display = 'flex';
    container.style.flexWrap = 'wrap';
    container.style.alignItems = 'center';
    container.style.gap = '8px';
    container.style.margin = '10px 0';

    // Eingabegruppe
    const inputGroup = document.createElement('div');
    inputGroup.className = 'input-group';
    inputGroup.style.width = 'auto';
    inputGroup.innerHTML = `
      <span class="input-group-addon">Alle</span>
      <select class="select optional form-control" id="selectBuilding" style="width:auto;">
        <option value="">wählen ...</option>
        <option value="all">Alle Wachen</option>
        <option value="0">Feuerwachen</option>
        <option value="18">Feuerwachen (klein)</option>
        <option value="2">Rettungswachen</option>
        <option value="20">Rettungswachen (klein)</option>
        <option value="5">Rettungshubschrauber-Stationen</option>
        <option value="12">Schnelleinsatzgruppen (SEG)</option>
        <option value="6">Polizeiwachen</option>
        <option value="19">Polizeiwachen (Kleinwache)</option>
        <option value="11">Bereitschaftspolizeien</option>
        <option value="17">Polizei-Sondereinheiten</option>
        <option value="13">Polizeihubschrauberstationen</option>
        <option value="9">THW-Ortsverbände</option>
        <option value="15">Wasserrettungen</option>
        <option value="21">Rettungshundestaffeln</option>
      </select>
      <span class="input-group-addon">auf</span>
      <input class="numeric integer optional form-control" id="setMaxPersonal" step="1" type="number" value="0" style="width:90px;">
      <span class="input-group-addon">Personal setzen</span>
    `;
    container.appendChild(inputGroup);

    // Button: Personal setzen
    const btnSet = document.createElement('button');
    btnSet.id = 'savePersonalSettings';
    btnSet.type = 'button';
    btnSet.className = 'btn btn-success btn-xs';
    btnSet.textContent = 'Personal-Soll Speichern';
    container.appendChild(btnSet);

    // Status 1
    const persOut = document.createElement('span');
    persOut.id = 'persOut';
    persOut.style.marginLeft = '5px';
    persOut.style.fontWeight = 'bold';
    container.appendChild(persOut);

    // Button: automatisch einstellen
    const btnAuto = document.createElement('button');
    btnAuto.id = 'autoHireAll';
    btnAuto.type = 'button';
    btnAuto.className = 'btn btn-warning btn-xs';
    btnAuto.textContent = 'Bewerbung auf Automatisch stellen';
    container.appendChild(btnAuto);

    // Status 2
    const autoOut = document.createElement('span');
    autoOut.id = 'autoHireOut';
    autoOut.style.marginLeft = '5px';
    autoOut.style.fontWeight = 'bold';
    container.appendChild(autoOut);

    // Einfügen
    table.parentNode.insertBefore(container, table);

    // Klick-Logik (1x binden)
    btnSet.addEventListener('click', async () => {
      const sel = document.getElementById('selectBuilding');
      if (!sel) return;

      const selectedTypeId = sel.value;
      const selectedTypeName = sel.options[sel.selectedIndex]?.innerText || '';

      const countSelectedTypes = selectedTypeId === 'all'
        ? $('#building_table tbody tr td:nth-child(2) a').length
        : $(`#building_table tbody tr td:nth-child(2) a[building_type='${selectedTypeId}']`).length;

      let countDoneTypes = 0, countLoopings = 0;

      $('#building_table tbody tr').each(function () {
        const t = $(this);
        const buildingId = $('td:nth-child(2) a', t).attr('href').match(/\d+/);
        const buildingTypeId = $('td:nth-child(2) a', t).attr('building_type');
        const maxPers = $('#setMaxPersonal').val();

        if (selectedTypeId === 'all' || buildingTypeId === selectedTypeId) {
          countLoopings++;
          setTimeout(async function () {
            await $.post(`/buildings/${buildingId}?personal_count_target_only=1`, {
              'building': { 'personal_count_target': maxPers },
              '_method': 'put'
            }).done(function () {
              countDoneTypes++;
              $(`#building_personal_count_target_${buildingId}`).text(maxPers);
              $('#persOut').text(`${countDoneTypes} von ${countSelectedTypes} ${selectedTypeName} auf ${maxPers} Personal gesetzt.`);
            });
          }, countLoopings * 250);
        }
      });
    });

    btnAuto.addEventListener('click', function () {
      const hireButtons = $(`a.btn-hire[duration='automatic']`);
      const total = hireButtons.length;
      let done = 0;

      hireButtons.each(function (i, el) {
        setTimeout(function () {
          $.get($(el).attr('href'), function () {
            done++;
            $('#autoHireOut').text(`${done} von ${total} Wachen automatisch eingestellt.`);
          });
        }, i * 100); // 0,5s Abstand
      });
    });
  }

  // ---------- Robust initialisieren: Intervall + Observer ----------
  function tryBuild() {
    // Tabelle vorhanden?
    const table = document.getElementById('building_table') || document.querySelector('#tab_buildings table');
    if (!table) return;
    // UI schon da?
    if (document.getElementById('selectBuilding')) return;

    buildInterface();
    // console.log('[Wachenpersonal] UI eingefügt.');
  }

  // 1) Regelmäßig prüfen, bis UI steht
  const uiInterval = setInterval(() => {
    tryBuild();
    if (document.getElementById('selectBuilding')) {
      clearInterval(uiInterval);
    }
  }, 500);

  // 2) Zusätzlich Tab beobachten und bei Änderungen UI wiederherstellen
  const tab = document.getElementById('tab_buildings');
  if (tab) {
    const Obs = window.MutationObserver || window.WebKitMutationObserver;
    new Obs(() => {
      if ((document.getElementById('building_table') || document.querySelector('#tab_buildings table')) &&
          !document.getElementById('selectBuilding')) {
        buildInterface();
        // console.log('[Wachenpersonal] UI nachgeladen.');
      }
    }).observe(tab, { childList: true, subtree: true });
  }
})();
