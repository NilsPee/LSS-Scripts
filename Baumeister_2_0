// ==UserScript==
// @name         Baumeister 2.0
// @namespace    bos-ernie.leitstellenspiel.de
// @version      2.0
// @license      BSD-3-Clause
// @author       BOS-Ernie & NilsPe
// @description  Mehrere Positionen vormerken, eigene Namen + Zähler, Leitstelle pro Marker, Kombi-Auswahl. Baut wie Baumeister nacheinander.
// @match        https://www.leitstellenspiel.de/*
// @match        https://polizei.leitstellenspiel.de/*
// @run-at       document-idle
// @grant        none
// ==/UserScript==

/* global building_new_marker, building_new_dragend, L */

(function () {
  "use strict";

  // --- Prefixes (Name-Basis) ---
  const TYPE_PREFIXES = {
    0: "Feuerwache ",
    2: "Rettungswache ",
    4: "Krankenhaus ",
    6: "Polizeiwache ",
    7: "Leitstelle ",
    9: "THW-Ortsverband ",
    11: "Bepol ",
    12: "SEG ",
    13: "Polizeihubschrauber ",
    15: "Wasserrettung ",
  };

  // --- Farben für Marker + Legende ---
  const TYPE_COLORS = {
    0: "red",
    2: "green",
    4: "magenta",
    6: "blue",
    7: "darkgray",
    9: "brown",
    11: "purple",
    12: "orange",
    13: "teal",
    15: "cyan",
  };

  // --- Gebäudekombinationen ---
  const TYPE_COMBOS = {
    "": [],
    "FW + THW + SEG": [0, 9, 12],
    "BePol + Polizei": [11, 6],
  };

  // --- Namens-Suffix + Zähler ---
  let nameSuffixInput = null;
  let nameCounters = {};

  function buildingNameFor(type) {
    const suffix = nameSuffixInput ? nameSuffixInput.value.trim() : "";
    const key = type + "|" + suffix;
    if (!nameCounters[key]) nameCounters[key] = 0;
    nameCounters[key]++;
//    const number = String(nameCounters[key]).padStart(2, "0");
    const number = String(nameCounters[key]).padStart(2, "0");
    return (TYPE_PREFIXES[type] || "Gebäude ") + suffix + " " + number;
  }

  // --- Hilfsfunktionen für Leitstellenwahl ---
  class Coordinate {
    constructor(lat, lon) {
      this.latitude = lat;
      this.longitude = lon;
    }
  }
  let controlCenters = [];
  async function getBuildings() {
    const res = await fetch("/api/buildings.json");
    return res.json();
  }
  async function initControlCenters() {
    const buildings = await getBuildings();
    controlCenters = buildings.filter((b) => b.building_type === 7);
  }
  function deg2rad(d) {
    return d * Math.PI / 180;
  }
  function distKm(a, b) {
    const R = 6371,
      dLat = deg2rad(b.latitude - a.latitude),
      dLon = deg2rad(b.longitude - a.longitude);
    const A =
      Math.sin(dLat / 2) ** 2 +
      Math.cos(deg2rad(a.latitude)) *
        Math.cos(deg2rad(b.latitude)) *
        Math.sin(dLon / 2) ** 2;
    return 2 * R * Math.atan2(Math.sqrt(A), Math.sqrt(1 - A));
  }
  function nearestControlCenterId(coord) {
    return controlCenters
      .map((c) => ({
        id: c.id,
        d: distKm(coord, new Coordinate(c.latitude, c.longitude)),
      }))
      .sort((a, b) => a.d - b.d)[0]?.id;
  }

// --- createBuilding wie im Original-Baumeister ---
async function createBuilding() {
  const form = document.getElementById("new_building");
  if (!form) throw new Error("Formular fehlt!");

  const typeVal = document.getElementById("building_building_type")?.value;

  // --- DOM-Feld setzen ---
  if (typeVal === "0") { // Feuerwache
    const sf = document.getElementById("building_start_vehicle_feuerwache");
    if (sf) sf.value = 30; // HLF 20
  }
  if (typeVal === "18") { // Klein-Feuerwache
    const sf = document.getElementById("building_start_vehicle_feuerwache_kleinwache");
    if (sf) sf.value = 30; // HLF 20
  }

  // --- FormData erzeugen + fix überschreiben ---
  const formData = new FormData(form);
  if (typeVal === "0" || typeVal === "18") {
    formData.set("building[start_vehicle]", "30"); // HLF 20
  }

  const res = await fetch("/buildings", {
    method: "POST",
    headers: {
      "x-csrf-token": document.querySelector('meta[name="csrf-token"]')?.content,
      "x-requested-with": "XMLHttpRequest"
    },
    body: formData,
    credentials: "include"
  });

  const text = await res.text();
  const parser = new DOMParser();
  const doc = parser.parseFromString(text, "text/html");

  const alerts = doc.querySelectorAll("span.label-danger");
  if (alerts.length) {
    throw new Error([...alerts].map(a => a.textContent.trim()).join("\n"));
  }
  const m = text.match(/\/buildings\/(\d+)/);
  if (!m) throw new Error("Gebäude-ID nicht gefunden");
  return m[1];
}




  // --- Queue + Marker + Status/Legende ---
  let planned = [];
  let previewMarkers = [];
  let statusBox = null;
  let legendBox = null;

  function addPreviewMarker(lat, lon, type) {
    if (!window.map) return;
    const color = TYPE_COLORS[type] || "gray";
    const m = L.circleMarker([lat, lon], {
      radius: 6,
      color,
      fillColor: color,
      fillOpacity: 0.7,
    }).addTo(window.map);
    previewMarkers.push(m);
  }

    function resetPlans() {
        planned = [];
        previewMarkers.forEach(m => window.map?.removeLayer(m));
        previewMarkers = [];
        nameCounters = {}; // --- Zähler zurücksetzen ---
        renderStatus();
    }

  function renderLegend() {
    if (!legendBox) return;
    legendBox.innerHTML = "<b>Legende:</b><br>";
    const counts = {};
    planned.forEach((p) => (counts[p.type] = (counts[p.type] || 0) + 1));

    Object.keys(TYPE_COLORS).forEach((t) => {
      const color = TYPE_COLORS[t];
      const name = TYPE_PREFIXES[t] || `Typ ${t}`;
      const count = counts[t] ? ` (${counts[t]})` : "";
      legendBox.innerHTML += `
        <div style="display:flex;align-items:center;gap:6px;">
          <span style="width:14px;height:14px;background:${color};border:1px solid #000;display:inline-block"></span>
          ${name}${count}
        </div>`;
    });
  }
  function renderStatus(text) {
    if (!statusBox) return;
    statusBox.innerHTML = text || `<b>Vorgemerkt:</b> ${planned.length}`;
    renderLegend();
  }

// Hilfsfunktion fürs Startfahrzeug
function forceStartVehicle(type) {
  let tries = 0;
  const interval = setInterval(() => {
    let sf = null;
    if (Number(type) === 0) {
      sf = document.getElementById("building_start_vehicle_feuerwache");
    }
    if (Number(type) === 18) {
      sf = document.getElementById("building_start_vehicle_feuerwache_kleinwache");
    }
    if (sf) {
      sf.value = 30; // HLF 20
      clearInterval(interval);
    }
    if (++tries > 10) { // nach 10 Versuchen (ca. 1 Sekunde) abbrechen
      clearInterval(interval);
    }
  }, 100);
}

// --- Bau-Queue ---
async function buildQueue() {
  if (planned.length === 0) {
    alert("Keine Positionen vorgemerkt!");
    return;
  }
  const total = planned.length;
  let success = 0;

  for (let i = 0; i < total; i++) {
    const { lat, lon, type, leitstelleId, name } = planned[i];
    try {
      // Marker & Dragend
      if (window.building_new_marker) {
        building_new_marker.setLatLng([lat, lon]);
        if (typeof building_new_dragend === "function") building_new_dragend();
      }

      // Typ wählen
      const sel = document.getElementById("building_building_type");
      if (sel) {
        for (let j = 0; j < sel.options.length; j++) {
          if (sel.options[j].value === String(type)) {
            sel.selectedIndex = j;
            sel.dispatchEvent(new Event("change", { bubbles: true }));
            break;
          }
        }
      }

      // Startfahrzeug ggf. setzen (robust mit Retry)
      forceStartVehicle(type);

      // Name & Leitstelle setzen
      const nameInput = document.getElementById("building_name");
      if (nameInput) nameInput.value = name;
      const leitstelleInput = document.getElementById("building_leitstelle_building_id");
      if (leitstelleInput) leitstelleInput.value = leitstelleId;

      // Bau absenden
      const id = await createBuilding();
      success++;
      renderStatus(`<b>Gebaut:</b> ${success}/${total} (ID ${id})`);

      await new Promise((r) => setTimeout(r, 400));
    } catch (e) {
      console.error("Fehler:", e);
      renderStatus(`<b>Fehler bei Gebäude ${i + 1}</b>`);
    }
  }

  alert(`Fertig. Erfolgreich gebaut: ${success}/${total}`);
  resetPlans();
}


  // --- Buttons + UI ---
  function addComboDropdown() {
    const typeDropdown = document.getElementById("building_building_type");
    if (!typeDropdown) return;
    if (document.getElementById("building_combo_type")) return;

    const comboSelect = document.createElement("select");
    comboSelect.id = "building_combo_type";
    comboSelect.className = "select required form-control";
    comboSelect.style.marginTop = "5px";

    for (const label in TYPE_COMBOS) {
      const opt = document.createElement("option");
      opt.value = label;
      opt.textContent = label || "— Keine Kombination —";
      comboSelect.appendChild(opt);
    }
    typeDropdown.parentElement.appendChild(comboSelect);
  }

function addButtons() {
  const host = document.getElementById("detail_16")?.parentElement;
  if (!host) return;
  if (document.getElementById("multi-build-plan-btn")) return;

  // --- Name-Feld ausblenden ---
  const nameInput = document.getElementById("building_name");
  if (nameInput) nameInput.style.display = "none";
  const nameLabel = document.querySelector("label[for='building_name']");
  if (nameLabel) nameLabel.style.display = "none";

// --- Eingabefeld für Namens-Suffix im gleichen Design (Label links, Input rechts) ---
const suffixWrapper = document.createElement("div");
suffixWrapper.className = "form-group"; // gleiche Gruppe wie Adresse etc.
suffixWrapper.style.display = "flex";
suffixWrapper.style.alignItems = "center";

const suffixLabel = document.createElement("label");
suffixLabel.setAttribute("for", "custom_name_suffix");
suffixLabel.className = "control-label";
suffixLabel.style.width = "120px"; // gleiche Breite wie andere Labels
suffixLabel.style.marginBottom = "0";
suffixLabel.textContent = "Namens-Suffix";

nameSuffixInput = document.createElement("input");
nameSuffixInput.type = "text";
nameSuffixInput.id = "custom_name_suffix";
nameSuffixInput.className = "form-control";
nameSuffixInput.style.flex = "1"; // Input nimmt Restbreite

suffixWrapper.append(suffixLabel, nameSuffixInput);
host.append(suffixWrapper);

  // --- Buttons in einer Reihe ---
  const btnRow = document.createElement("div");
  btnRow.style.display = "flex";
  btnRow.style.gap = "6px";
  btnRow.style.marginBottom = "6px";

  const planBtn = document.createElement("button");
  planBtn.id = "multi-build-plan-btn";
  planBtn.className = "btn btn-info";
  planBtn.textContent = "Marker setzen";
  planBtn.type = "button";

  const buildBtn = document.createElement("button");
  buildBtn.className = "btn btn-success";
  buildBtn.textContent = "Alle Gebäude bauen";
  buildBtn.type = "button";

  const resetBtn = document.createElement("button");
  resetBtn.className = "btn btn-danger";
  resetBtn.textContent = "Marker Zurücksetzen";
  resetBtn.type = "button";

  btnRow.append(planBtn, buildBtn, resetBtn);

  // --- Status & Legende ---
  statusBox = document.createElement("div");
  statusBox.style.marginTop = "8px";
  statusBox.style.color = "#fff";

  legendBox = document.createElement("div");
  legendBox.style.marginTop = "6px";
  legendBox.style.color = "#fff";

  // --- Alles ins Host einfügen ---
  host.append(suffixWrapper, btnRow, statusBox, legendBox);
  renderStatus();

  // --- Button Events ---
  planBtn.addEventListener("click", (e) => {
    e.preventDefault();
    if (!window.building_new_marker) {
      alert("Marker nicht gefunden – bitte Baumenü öffnen.");
      return;
    }
    const { lat, lng } = window.building_new_marker.getLatLng();
    const type = document.getElementById("building_building_type").value;
    const combo = document.getElementById("building_combo_type")?.value;
    const leitstelleId =
      document.getElementById("building_leitstelle_building_id")?.value ||
      nearestControlCenterId(new Coordinate(lat, lng));

    if (combo && TYPE_COMBOS[combo]?.length) {
      TYPE_COMBOS[combo].forEach((ct) => {
        planned.push({
          lat,
          lon: lng,
          type: ct,
          leitstelleId,
          name: buildingNameFor(ct),
        });
        addPreviewMarker(lat, lng, ct);
      });
    } else {
      planned.push({
        lat,
        lon: lng,
        type,
        leitstelleId,
        name: buildingNameFor(type),
      });
      addPreviewMarker(lat, lng, type);
    }
    renderStatus();
  });

  buildBtn.addEventListener("click", (e) => {
    e.preventDefault();
    buildQueue();
  });
  resetBtn.addEventListener("click", (e) => {
    e.preventDefault();
    resetPlans();
  });

  // --- Hotkeys ---
  document.addEventListener("keydown", (e) => {
    if (["INPUT", "TEXTAREA", "SELECT"].includes(e.target.tagName)) return;
    if (e.key.toLowerCase() === "v" && !e.repeat) planBtn.click();
    if (e.key.toLowerCase() === "s" && !e.repeat) buildBtn.click();
  });
}



  async function main() {
    await initControlCenters();
    const observer = new MutationObserver((muts) => {
      for (const m of muts) {
        if (m.target.querySelector && m.target.querySelector("#new_building")) {
          addComboDropdown();
          addButtons();
        }
      }
    });
    const node = document.getElementById("buildings");
    if (node) observer.observe(node, { childList: true, subtree: true });
  }

  main();
})();