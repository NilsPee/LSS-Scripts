// ==UserScript==
// @name         Autobuy vehicles LS
// @namespace    http://tampermonkey.net/
// @version      4.0.1
// @description  Fahrzeuge automatisch kaufen – funktioniert sowohl in Einzelwachen als auch in Leitstellen (alle zugeordneten Wachen)
// @author       Silberfighter & NilsPe
// @include      https://www.leitstellenspiel.de/buildings/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=leitstellenspiel.de
// @grant        none
// ==/UserScript==

(async function () {

  //----------------------------------------------
  // EINSTELLUNGEN
  //----------------------------------------------
  const DELAY_PER_VEHICLE = 100;
  const DELAY_PER_BUILDING = 100;
  const DELAY_AFTER_FETCH = 100;

  //----------------------------------------------
  // KONFIGURATION
  //----------------------------------------------
    const vehicleConfigurations = [

        /*
        ANLEITUNG

        1. kopiere folgenden Eintrag in dem sich unterhalb dieser Anleitung markierten Bereich:



        {
            buildingID: 11,
            displayName: "",
            vehicles:[
                [50,9],
                [35,3],
                [51,1],
                [52,1],
            ]
        },



        Die sich am Anfang darin befindenden Einträge können rausgelöscht werden. Sie dienen als Veranschaulichung, wie ein beispielhafter Eitnrag aussehen kann.


        2. tausche die 11 in folgender Zeile    buildingID: 11,     durch die Gebäude-ID, für welche ein Eintrag erstellt werden soll. Lösche nicht das Komma am Ende!!!

        3. trage in folgender Zeile     displayName: "",     zwischen die beiden Gänsefüßchen den Namen der Konfiguration ein. Dieser Name wird auf den klickbaren Knopf angezeigt. Lösche nicht das Komma am Ende!!!

        4. ersetze die 4 folgenden Einträge

                [50,9],
                [35,3],
                [51,1],
                [52,1],

        durch die Fahrzeuge, die gekauft werden sollen. Die erste Zahl ist die Fahrzeug-ID. Die zweite Zahl gibt an, wie viele Fahrzeuge in der Wache vorhanden sein sollen.
        z.B. der Eintrag    [50,9],   bewirkt, dass das Fahrzeug mit der ID 50 (GruKw) am Ende 9 mal in der Wache vorhanden sein wird, NICHT 9 mal gekauft wird. Dies ist relevant, wenn bereits GruKw in der Wache vorhanden sind.
        Wenn z.B. bereits 3 GruKw vorhanden sind, werden nur 6 weitere gekauft, sodass am Ende 9 vorhanden sind


        */

        //------- FÜGE EINTRÄGE UNTERHALB EIN -------

        {
            buildingID: 11,
            displayName: "Bereitschaftspolizei",
            vehicles:[
                [50,9], //GruKw
                [35,3], //lBefKw
                [51,1], //FüKW
            ]
        },
        {
            buildingID: 0,
            displayName: "Feuerwache",
            vehicles:[
               [2,2], //DLK23
               [53,1], //DekonP
                [34,2], //ELW2
                [57,1], //FwK
                [5,1], //GW-A
                [27,1], //GW-G
                [12,1], //GW-Mess
                [33,1], //GW-Höhe
                [10,1], //GW-Öl
                [30,6], //HLF20
                [14,2], //SW2000
            ]
        },
        {
            buildingID: 2,
            displayName: "Rettungswache",
            vehicles:[
                [74,1], //NAW
                [28,8], //RTW
                [29,4], //NEF
                [55,1], //LNA
                [56,1], //OrgL
            ]
        },
        {
            buildingID: 6,
            displayName: "Polizeiwache",
            vehicles:[
                [32,10], //FuStw
                [103,1], //FuStw (DGL)
            ]
        },
        {
            buildingID: 13,
            displayName: "Polizeihubschrauber",
            vehicles:[
                [61,4], //Pol-Hubschrauber
            ]
        },
        {
            buildingID: 15,
            displayName: "Wasserrettung",
            vehicles:[
                [63,2], //GW-Taucher
                [64,2], //GW-Wasser
                [70,2], //Boot
            ]
        },
        {
            buildingID: 12,
            displayName: "SEG-Wache",
            vehicles:[
               [63,1], //GW-Taucher
               [64,1], //GW-Wasser
               [70,1], //Boot
               [59,1], //ELW 1 SEG
               [127,1], //GW UAS
               [91,2], //Rettungshund
            //  [132,3], //FKH
            //  [133,3], //Bt LKW
            //  [131,4], //Bt-Kombi

           ]
        },
        {
            buildingID: 9,
            displayName: "THW-Ortsverband",
            vehicles:[
               [39,2], //GKW
               [40,2], //MTW-TZ
               [41,2], //MzGW(N)
               [42,1], //LKW K9
               [123,1], //LKW 7 Lbw
               [100,1], //MLW 4
               [45,1], //MLW 5
               [43,1], //BrmG R
               [44,1], //Anh DLE
               [101,1], //Anh SwPu
               [102,1], //Anh 7
               [110,2], //NEA50
              // [144,1], //FüKW (THW)
              // [145,1], //FüKomKW
              // [146,1,], //Anh FüLa
              // [147,1], //FmKW
              // [148,1], //MTW-Fgr K
               [109,1], //MzGw SB
            ]
        },
        //------- FÜGE EINTRÄGE OBERHALB EIN -------
    ];


    const buildingsIDToIgnore = [4,1,3,8,10];

  //----------------------------------------------
  // HILFSFUNKTIONEN
  //----------------------------------------------
  function delay(ms) { return new Promise(res => setTimeout(res, ms)); }

  async function getBuildingsOfLeitstelle(leitstellenId) {
    let out = [];
    try {
      const res = await fetch(`/buildings/${leitstellenId}/leitstelle-buildings`);
      const html = await res.text();
      const doc = new DOMParser().parseFromString(html, "text/html");

      const links = Array.from(doc.querySelectorAll("a[href^='/buildings/']"));
      if (links.length > 0) {
        const seen = new Set();
        out = links
          .map(a => {
            const id = a.getAttribute("href").split("/buildings/")[1].split("/")[0];
            const name = a.innerText.trim();
            return { id, name, type: null };
          })
          .filter(b => /^\d+$/.test(b.id))
          .filter(b => (seen.has(b.id) ? false : (seen.add(b.id), true)));
      }
    } catch {}

    if (out.length === 0) {
      const tabBtn = document.querySelector(`a[href="#tab_buildings"]`) ||
                     document.querySelector(`a[url*="/leitstelle-buildings"]`);
      if (tabBtn) {
        tabBtn.click();
        for (let i = 0; i < 50; i++) {
          const anchors = document.querySelectorAll(`#tab_buildings a[href^="/buildings/"]`);
          if (anchors.length > 0) break;
          await delay(100);
        }
        const anchors = Array.from(document.querySelectorAll(`#tab_buildings a[href^="/buildings/"]`));
        const seen = new Set();
        out = anchors
          .map(a => {
            const id = a.getAttribute("href").split("/buildings/")[1].split("/")[0];
            const name = a.innerText.trim();
            return { id, name, type: null };
          })
          .filter(b => /^\d+$/.test(b.id))
          .filter(b => (seen.has(b.id) ? false : (seen.add(b.id), true)));
      }
    }

    for (const b of out) {
      try {
        const page = await fetch(`/buildings/${b.id}`);
        const html = await page.text();
        const doc = new DOMParser().parseFromString(html, "text/html");
        const h1 = doc.querySelector("h1[building_type]");
        if (h1) b.type = h1.getAttribute("building_type");
        const h1Text = doc.querySelector("h1")?.textContent?.trim();
        if (h1Text) b.name = h1Text;
        await delay(DELAY_AFTER_FETCH);
      } catch {}
    }
    return out;
  }

  async function getVehiclesOfLeitstelle(leitstellenId) {
    const tabLink = document.querySelector(`a[href="#tab_vehicle"]`);
    if (tabLink) tabLink.click();

    let tries = 0;
    while (tries < 50) {
      const rows = document.querySelectorAll("#tab_vehicle tr");
      if (rows.length > 0) break;
      await delay(100);
      tries++;
    }

    let vehicles = [];
    const rows = document.querySelectorAll("#tab_vehicle tr");

    rows.forEach(tr => {
      let buildingId = tr.getAttribute("building_id") || tr.getAttribute("data-building_id");
      if (!buildingId) {
        const link = tr.querySelector("a[href*='/buildings/']");
        if (link) buildingId = link.href.split("/buildings/")[1].split("/")[0];
      }
      tr.querySelectorAll("img[vehicle_type_id]").forEach(img => {
        vehicles.push({ type: img.getAttribute("vehicle_type_id"), building: buildingId });
      });
    });

    return vehicles.filter(v => v.building);
  }

  async function getVehiclesOfBuilding(buildingId) {
    const res = await fetch(`/buildings/${buildingId}/vehicles`);
    const html = await res.text();
    const doc = new DOMParser().parseFromString(html, "text/html");
    return Array.from(doc.querySelectorAll("img[vehicle_type_id]"))
      .map(img => img.getAttribute("vehicle_type_id"));
  }

  async function autobuyForLeitstelle(leitstellenId, statusDiv) {
    const buildings = await getBuildingsOfLeitstelle(leitstellenId);
    const vehicles = await getVehiclesOfLeitstelle(leitstellenId);

    const total = buildings.length;
    let processed = 0;

for (const b of buildings) {
  processed++;
  if (!b.type) {
    statusDiv.innerText = `Überspringe ${b.name} (${b.id}) – kein Typ ermittelt`;
    continue;
  }

  const config = vehicleConfigurations.find(c => c.buildingID == Number(b.type));
  if (!config) {
    statusDiv.innerText = `(${processed}/${total}) Überspringe ${b.name}`;
    await delay(DELAY_PER_BUILDING);
    continue;
  }

  statusDiv.innerText = `(${processed}/${total}) Bearbeite ${b.name} …`;

  for (const [vehicleType, wanted] of config.vehicles) {
    const current = vehicles.filter(
      v => String(v.building) === String(b.id) && String(v.type) === String(vehicleType)
    ).length;
    const toBuy = Math.max(0, wanted - current);
    if (toBuy === 0) continue;

    // *** Risikoarme Parallel-Variante: alle Fahrzeuge dieses Typs gleichzeitig kaufen ***
    const buyPromises = [];
    for (let i = 0; i < toBuy; i++) {
      buyPromises.push(
        $.post(`/buildings/${b.id}/vehicle/${b.id}/${vehicleType}/credits?building=${b.id}`, {
          "_method": "get",
          "authenticity_token": $("meta[name=csrf-token]").attr("content")
        })
      );
    }
    await Promise.all(buyPromises); // warte, bis alle POSTs durch sind
    await delay(300); // kurzer Puffer zwischen Typen
  }

  await delay(DELAY_PER_BUILDING); // Puffer zwischen Wachen
}

    statusDiv.innerText = "✅ Autobuy abgeschlossen!";
  }

  //----------------------------------------------
  // HAUPTLOGIK
  //----------------------------------------------
  const buildingId = window.location.href.replace("https://www.leitstellenspiel.de/buildings/", "");
  const titleDiv = Array.from(document.getElementsByTagName("h1")).find(e => e.getAttribute("building_type") != undefined);
  if (!titleDiv) return;
  const buildingTypeID = Number(titleDiv.getAttribute("building_type"));

  // Leitstelle
  if (buildingTypeID === 7) {
    let wrapperDIV = document.createElement("div");
    wrapperDIV.innerText = "Leitstelle - Autobuy:";
    wrapperDIV.style.padding = "15px 5px 15px 5px";
    titleDiv.parentNode.parentNode.insertBefore(wrapperDIV, titleDiv.parentNode.nextSibling);

    let btn = document.createElement("a");
    btn.className = "btn btn-danger btn-xs";
    btn.innerText = "Autobuy alle zugeordneten Wachen";
    btn.style.margin = "5px";
    wrapperDIV.appendChild(btn);

    let statusDiv = document.createElement("div");
    statusDiv.style.marginTop = "10px";
    statusDiv.style.fontWeight = "bold";
    wrapperDIV.appendChild(statusDiv);

    btn.addEventListener("click", async function () {
      statusDiv.innerText = "🔄 Lade Gebäudeliste und Fahrzeugliste…";
      await autobuyForLeitstelle(buildingId, statusDiv);
    });
    return;
  }

  // Einzelne Wache
  if (buildingsIDToIgnore.indexOf(buildingTypeID) >= 0) return;

  let wrapperDIV = document.createElement("div");
  wrapperDIV.innerText = "Vehicle-Configs:";
  wrapperDIV.style.padding = "15px 5px 15px 5px";
  titleDiv.parentNode.parentNode.insertBefore(wrapperDIV, titleDiv.parentNode.nextSibling);

  for (let i = 0; i < vehicleConfigurations.length; i++) {
    if (vehicleConfigurations[i].buildingID == buildingTypeID) {
      let btn = document.createElement("a");
      btn.className = "btn btn-success btn-xs autoVehicleBuy";
      btn.setAttribute("config_id", i);
      btn.innerText = vehicleConfigurations[i].displayName;
      btn.style.margin = "5px";
      wrapperDIV.appendChild(btn);
    }
  }

  document.querySelectorAll(".autoVehicleBuy").forEach(function (element) {
    element.addEventListener("click", async function () {
      const config = vehicleConfigurations[element.getAttribute("config_id")];
      let statusDiv = document.createElement("div");
      statusDiv.style.marginTop = "10px";
      statusDiv.style.fontWeight = "bold";
      wrapperDIV.appendChild(statusDiv);

      const allVehicles = await getVehiclesOfBuilding(buildingId);
      statusDiv.innerText = "🚀 Kaufe Fahrzeuge...";
      let bought = false;

      for (const [vehicleType, wanted] of config.vehicles) {
        const current = allVehicles.filter(v => v == vehicleType.toString()).length;
        const toBuy = Math.max(0, wanted - current);
        for (let i = 0; i < toBuy; i++) {
          await $.post(`/buildings/${buildingId}/vehicle/${buildingId}/${vehicleType}/credits?building=${buildingId}`, {
            "_method": "get",
            "authenticity_token": $("meta[name=csrf-token]").attr("content")
          });
          await delay(DELAY_PER_VEHICLE);
          bought = true;
        }
      }

      await delay(DELAY_PER_BUILDING);
      if (bought) location.reload();
      else statusDiv.innerText = "✅ Alle Fahrzeuge vorhanden!";
    });
  });

})();
